{"version":3,"sources":["ProgrammingContest.controller.js"],"names":["ProgrammingContest","require","process","env","Email","Password","crypto","nodemailer","transporter","createTransport","service","user","pass","getPC","req","res","error","flash","postPC","_req$body","body","teamname","institutename","coachname","coachcontact","coachemail","tshirtcoach","teamleadername","teamleadercontact","teamleaderemail","tshirtteamleader","member1name","member1contact","member1email","tshirtmember1","member2name","member2contact","member2email","tshirtmember2","log","randomBytes","toString","findOne","then","participantteam","confirmCode","redirect","name","forEach","team","selected","options","from","subject","text","concat","err","console","response","getPCList","participant_teams","find","data","teams","render","deleteOne","_id","params","id","save","paid","total","paymentDonePC","getInfoPC","info","e","editPC","findOneAndUpdate","deletePC","selectPC"],"mappings":"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","file":"ProgrammingContest.controller.min.js","sourcesContent":["const ProgrammingContest = require(\"../models/ProgrammingContest.model\");\r\n\r\nrequire(\"dotenv\").config();\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\nconst Email = process.env.Email;\r\nconst Password = process.env.Password;\r\n\r\n\r\nconst crypto = require('crypto');\r\n\r\nconst nodemailer = require('nodemailer')\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n        user: Email,\r\n        pass: Password,\r\n    },\r\n})\r\n\r\nconst getPC = (req, res) => {\r\n    res.render(\"programming-contest/register.ejs\", { error: req.flash(\"error\") });\r\n};\r\n\r\nconst postPC = (req, res) => {\r\n    const { teamname, institutename, coachname, coachcontact, coachemail, tshirtcoach, teamleadername, teamleadercontact, teamleaderemail, tshirtteamleader, member1name, member1contact, member1email, tshirtmember1, member2name, member2contact, member2email, tshirtmember2 } = req.body;\r\n\r\n    console.log(req.body);\r\n\r\n\r\n\r\n\r\n    const total = 300;\r\n    const paid = 0;\r\n    const selected = false;\r\n    const confirmCode = crypto.randomBytes(20).toString('hex')\r\n\r\n    let error = \"\";\r\n\r\n    //if name & contact differs, only then we will store to database\r\n    ProgrammingContest.findOne({ teamname: teamname, institutename: institutename }).then((participantteam) => {\r\n        if (participantteam) {\r\n            error = \"Participant Team with same name and Institutes exists\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/register\");\r\n        } else {\r\n            const team = new ProgrammingContest({\r\n                teamname: teamname,\r\n                institutename: institutename,\r\n                coachname: coachname,\r\n                coachcontact: coachcontact,\r\n                coachemail: coachemail,\r\n                tshirtcoach: tshirtcoach,\r\n                teamleadername: teamleadername,\r\n                teamleadercontact: teamleadercontact,\r\n                teamleaderemail: teamleaderemail,\r\n                tshirtteamleader: tshirtteamleader,\r\n                member1name: member1name,\r\n                member1contact: member1contact,\r\n                member1email: member1email,\r\n                tshirtmember1: tshirtmember1,\r\n                member2name: member2name,\r\n                member2contact: member2contact,\r\n                member2email: member2email,\r\n                tshirtmember2: tshirtmember2,\r\n                total: total,\r\n                paid: paid,\r\n                selected: selected,\r\n                confirmCode: confirmCode,\r\n            });\r\n            team\r\n                .save()\r\n                .then(() => {\r\n                    error = \"Participant Team has been registered successfully!!\";\r\n                    req.flash(\"error\", error);\r\n\r\n                    const allEmail = [\r\n                        { email: coachemail, name: coachname },\r\n                        { email: teamleaderemail, name: teamleadername },\r\n                        { email: member1email, name: member1name },\r\n                        { email: member2email, name: member2name },\r\n                    ]\r\n\r\n                    allEmail.forEach((team) => {\r\n                        const options = {\r\n                            to: team.email,\r\n                            from: Email,\r\n                            subject: 'Registration is Successful!',\r\n                            text: `Hello ${team.name},\r\n                          You have successfully registered to programming contest as Team ${teamname} and your confirmation code is ${confirmCode}`,\r\n                        }\r\n\r\n                        transporter.sendMail(options, function (err, res) {\r\n                            if (err) {\r\n                                console.log(err)\r\n                                return\r\n                            }\r\n                            console.log('Sent: ' + res.response)\r\n                        })\r\n                    })\r\n\r\n                    res.redirect(\"/ProgrammingContest/register\");\r\n                })\r\n                .catch((err) => {\r\n                    error = \"Kono error nai\";\r\n                    console.log(err)\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/ProgrammingContest/register\");\r\n                });\r\n        }\r\n    });\r\n};\r\n\r\nconst getPCList = (req, res) => {\r\n    let participant_teams = [];\r\n    let error = \"\";\r\n    ProgrammingContest.find()\r\n        .then((data) => {\r\n            participant_teams = data;\r\n            res.render(\"programming-contest/list.ejs\", {\r\n                error: req.flash(\"error\"),\r\n                teams: participant_teams,\r\n            });\r\n        })\r\n        .catch(() => {\r\n            error = \"Failed to fetch participant teams\";\r\n            res.render(\"ProgrammingContest/list.ejs\", {\r\n                error: req.flash(\"error\", error),\r\n                teams: participant_teams,\r\n            });\r\n        });\r\n};\r\n\r\nconst deletePC = (req, res) => {\r\n    const id = req.params.id;\r\n    //console.log(id);\r\n\r\n    let error = \"\";\r\n    ProgrammingContest.deleteOne({ _id: req.params.id })\r\n        .then(() => {\r\n            error = \"Participant Team deleted successfully!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        })\r\n        .catch(() => {\r\n            error = \"Failed to delete data!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        });\r\n};\r\n\r\nconst selectPC = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    ProgrammingContest.findOne({ _id: id })\r\n        .then((team) => {\r\n            team.selected = true;\r\n            team\r\n                .save()\r\n                .then(() => {\r\n                    let error = \"Team has been selected succesfully!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/ProgrammingContest/list\");\r\n                })\r\n                .catch(() => {\r\n                    let error = \"Data could not be updated\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/ProgrammingContest/list\");\r\n                });\r\n        })\r\n        .catch(() => {\r\n            let error = \"Data could not be updated\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        });\r\n};\r\n\r\nconst paymentDonePC = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    ProgrammingContest.findOne({ _id: id })\r\n        .then((team) => {\r\n            team.paid = team.total;\r\n            team\r\n                .save()\r\n                .then(() => {\r\n                    let error = \"Payment completed succesfully!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/ProgrammingContest/list\");\r\n                })\r\n                .catch(() => {\r\n                    let error = \"Data could not be updated!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/ProgrammingContest/list\");\r\n                });\r\n        })\r\n        .catch(() => {\r\n            let error = \"Data could not be updated!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        });\r\n};\r\n\r\nconst getInfoPC = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    let info = [];\r\n    let error = \"\";\r\n    ProgrammingContest.findOne({ _id: id })\r\n        .then((data) => {\r\n            info = data;\r\n            res.render(\"programming-contest/edit-participant.ejs\", {\r\n                error: req.flash(\"error\"),\r\n                team: info,\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n            error = \"Failed to fetch team details\";\r\n            res.render(\"programming-contest/edit-participant.ejs\", {\r\n                error: req.flash(\"error\", error),\r\n                team: info,\r\n            });\r\n        });\r\n};\r\n\r\nconst editPC = async (req, res) => {\r\n    const id = req.params.id;\r\n    const { teamname, institutename, coachname, coachcontact, coachemail, tshirtcoach, teamleadername, teamleadercontact, teamleaderemail, tshirtteamleader, member1name, member1contact, member1email, tshirtmember1, member2name, member2contact, member2email, tshirtmember2, total, paid, selected } = req.body;\r\n    console.log(req.body);\r\n\r\n    let error = \"\";\r\n\r\n    ProgrammingContest.findOneAndUpdate(\r\n        { _id: id },\r\n        { teamname, institutename, coachname, coachcontact, coachemail, tshirtcoach, teamleadername, teamleadercontact, teamleaderemail, tshirtteamleader, member1name, member1contact, member1email, tshirtmember1, member2name, member2contact, member2email, tshirtmember2, total, paid, selected })\r\n        .then((data) => {\r\n            error = \"Team updated successfully!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n            error = \"Failed to update team details\";\r\n            res.redirect(\"/ProgrammingContest/list\");\r\n        });\r\n};\r\n\r\nmodule.exports = { getPC, postPC, getPCList, deletePC, selectPC, paymentDonePC, editPC, getInfoPC };\r\n"]}