{"version":3,"sources":["MathOlympiad.controller.js"],"names":["MathOlympiad","require","config","process","Email","Password","env","crypto","nodemailer","createTransport","service","transporter","pass","getMO","req","res","render","error","flash","_req$body","body","name","category","contact","email","institution","tshirt","console","log","postMO","registrationFee","randomBytes","toString","findOne","then","participant","selected","redirect","total","save","options","confirmCode","text","concat","sendMail","err","info","response","getMOList","all_participant","data","participants","deleteMO","params","deleteOne","_id","id","paymentDoneMO","paid","e","editMO","findOneAndUpdate","module","exports","selectMO","getEditMO"],"mappings":"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","file":"MathOlympiad.controller.min.js","sourcesContent":["const MathOlympiad = require(\"../models/MathOlympiad.model\");\r\nrequire(\"dotenv\").config();\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\nconst Email = process.env.Email;\r\nconst Password = process.env.Password;\r\n\r\n\r\nconst crypto = require('crypto');\r\n\r\nconst nodemailer = require('nodemailer')\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n        user: Email,\r\n        pass: Password,\r\n    },\r\n})\r\n\r\nconst getMO = (req, res) => {\r\n    res.render(\"math-olympiad/register.ejs\", { error: req.flash(\"error\") });\r\n};\r\n\r\nconst postMO = (req, res) => {\r\n    const { name, category, contact, email, institution, tshirt } = req.body;\r\n    console.log(name);\r\n    console.log(category);\r\n    console.log(contact);\r\n    console.log(email);\r\n    console.log(institution);\r\n    console.log(tshirt);\r\n\r\n    let registrationFee = 0;\r\n    if (category == \"School\") {\r\n        registrationFee = 250;\r\n    } else if (category == \"College\") {\r\n        registrationFee = 400;\r\n    } else {\r\n        registrationFee = 500;\r\n    }\r\n\r\n    const total = registrationFee;\r\n    const paid = 0;\r\n    const selected = false;\r\n    const confirmCode = crypto.randomBytes(20).toString('hex');\r\n\r\n    let error = \"\";\r\n\r\n    //if name & contact differs, only then we will store to database\r\n    MathOlympiad.findOne({ name: name, contact: contact }).then((participant) => {\r\n        if (participant) {\r\n            error = \"Participant with same name and contact exists\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/MathOlympiad/register\");\r\n        } else {\r\n            const participant = new MathOlympiad({\r\n                name,\r\n                category,\r\n                contact,\r\n                email,\r\n                institution,\r\n                paid,\r\n                total,\r\n                selected,\r\n                confirmCode,\r\n                tshirt,\r\n            });\r\n            participant\r\n                .save()\r\n                .then(() => {\r\n                    error = \"Participant has been registered successfully!!\";\r\n                    req.flash(\"error\", error);\r\n\r\n                    const options = {\r\n                        to: email,\r\n                        from: Email,\r\n                        subject: 'Registration is Successful!',\r\n                        text: `Hello ${name},\r\n                        You have successfully registered to ${category} category and your confirmation code is ${confirmCode}`,\r\n                    }\r\n\r\n                    transporter.sendMail(options, function (err, info) {\r\n                        if (err) {\r\n                            console.log(err)\r\n                            return\r\n                        }\r\n                        console.log('Sent: ' + info.response)\r\n                    })\r\n\r\n\r\n                    res.redirect(\"/MathOlympiad/register\");\r\n                })\r\n                .catch(() => {\r\n                    error = \"Unexpected error\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/MathOlympiad/register\");\r\n                });\r\n        }\r\n    });\r\n\r\n    // res.render(\"math-olympiad/register.ejs\");\r\n};\r\n\r\nconst getMOList = (req, res) => {\r\n\r\n    let all_participant = [];\r\n    let error = \"\";\r\n    MathOlympiad.find().then((data) => {\r\n        all_participant = data\r\n        res.render('math-olympiad/list.ejs', {\r\n            error: req.flash('error'),\r\n            participants: all_participant,\r\n        });\r\n\r\n    }).catch(() => {\r\n        error = \"Failed to fetch data!\"\r\n        res.render('math-olympiad/list.ejs', {\r\n            error: req.flash('error', error),\r\n            participants: all_participant,\r\n        });\r\n    });\r\n};\r\n\r\nconst deleteMO = (req, res) => {\r\n    const id = req.params.id;\r\n    //console.log(id);\r\n    MathOlympiad.deleteOne({ _id: req.params.id }).then(() => {\r\n        let error = 'Data has been deleted successfully!';\r\n        req.flash('error', error);\r\n        res.redirect('/MathOlympiad/list');\r\n    })\r\n        .catch(() => {\r\n            let error = 'Failed to delete data!';\r\n            req.flash('error', error);\r\n            res.redirect('/MathOlympiad/list');\r\n        });\r\n};\r\n\r\nconst paymentDoneMO = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    MathOlympiad.findOne({ _id: id })\r\n        .then((participant) => {\r\n            participant.paid = participant.total;\r\n            participant\r\n                .save()\r\n                .then(() => {\r\n                    let error = \"Payment completed succesfully!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/MathOlympiad/list\");\r\n                })\r\n                .catch(() => {\r\n                    let error = \"Data could not be updated!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/MathOlympiad/list\");\r\n                });\r\n        })\r\n        .catch(() => {\r\n            let error = \"Data could not be updated\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/MathOlympiad/list\");\r\n        });\r\n};\r\n\r\nconst selectMO = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    MathOlympiad.findOne({ _id: id })\r\n        .then((participant) => {\r\n            participant.selected = true;\r\n            participant\r\n                .save()\r\n                .then(() => {\r\n                    let error = \"Participant has been selected succesfully!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/MathOlympiad/list\");\r\n                })\r\n                .catch(() => {\r\n                    let error = \"Data could not be updated!\";\r\n                    req.flash(\"error\", error);\r\n                    res.redirect(\"/MathOlympiad/list\");\r\n                });\r\n        })\r\n        .catch(() => {\r\n            let error = \"Data could not be updated!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/MathOlympiad/list\");\r\n        });\r\n};\r\n\r\nconst getEditMO = (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    let info = [];\r\n    let error = \"\";\r\n    MathOlympiad.findOne({ _id: id })\r\n        .then((data) => {\r\n            info = data;\r\n            res.render(\"math-olympiad/edit-participant.ejs\", {\r\n                error: req.flash(\"error\"),\r\n                participant: info,\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n            error = \"Participant details could not be fetched!\";\r\n            res.render(\"math-olympiad/editParticipant.ejs\", {\r\n                error: req.flash(\"error\", error),\r\n                participant: info,\r\n            });\r\n        });\r\n};\r\n\r\nconst editMO = async (req, res) => {\r\n    const id = req.params.id;\r\n    const { name, category, contact, email, institution, tshirt } = req.body;\r\n    //console.log(req.body);\r\n\r\n    let error = \"\";\r\n\r\n    MathOlympiad.findOneAndUpdate(\r\n        { _id: id },\r\n        { name, category, contact, email, institution, tshirt })\r\n        .then((data) => {\r\n            error = \"Update infromation successful!\";\r\n            req.flash(\"error\", error);\r\n            res.redirect(\"/MathOlympiad/list\");\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n            error = \"Update information failed!\";\r\n            res.redirect(\"/MathOlympiad/list\");\r\n        });\r\n};\r\n\r\nmodule.exports = { getMO, postMO, getMOList, deleteMO, paymentDoneMO, selectMO, editMO, getEditMO };"]}